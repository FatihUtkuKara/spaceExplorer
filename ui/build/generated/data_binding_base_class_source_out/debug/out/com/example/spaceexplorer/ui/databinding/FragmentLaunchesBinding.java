// Generated by view binder compiler. Do not edit!
package com.example.spaceexplorer.ui.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.spaceexplorer.ui.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLaunchesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipFailed;

  @NonNull
  public final Chip chipPending;

  @NonNull
  public final Chip chipSuccess;

  @NonNull
  public final Group errorContainer;

  @NonNull
  public final ImageView errorIcon;

  @NonNull
  public final TextView errorMessage;

  @NonNull
  public final TextView errorText;

  @NonNull
  public final TextView errorTitle;

  @NonNull
  public final RecyclerView launchesRecyclerView;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final Button retryButton;

  @NonNull
  public final TextInputEditText searchEditText;

  @NonNull
  public final TextInputLayout searchInputLayout;

  @NonNull
  public final ChipGroup statusChipGroup;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  private FragmentLaunchesBinding(@NonNull ConstraintLayout rootView, @NonNull Chip chipAll,
      @NonNull Chip chipFailed, @NonNull Chip chipPending, @NonNull Chip chipSuccess,
      @NonNull Group errorContainer, @NonNull ImageView errorIcon, @NonNull TextView errorMessage,
      @NonNull TextView errorText, @NonNull TextView errorTitle,
      @NonNull RecyclerView launchesRecyclerView, @NonNull ProgressBar progressBar,
      @NonNull Button retryButton, @NonNull TextInputEditText searchEditText,
      @NonNull TextInputLayout searchInputLayout, @NonNull ChipGroup statusChipGroup,
      @NonNull SwipeRefreshLayout swipeRefreshLayout) {
    this.rootView = rootView;
    this.chipAll = chipAll;
    this.chipFailed = chipFailed;
    this.chipPending = chipPending;
    this.chipSuccess = chipSuccess;
    this.errorContainer = errorContainer;
    this.errorIcon = errorIcon;
    this.errorMessage = errorMessage;
    this.errorText = errorText;
    this.errorTitle = errorTitle;
    this.launchesRecyclerView = launchesRecyclerView;
    this.progressBar = progressBar;
    this.retryButton = retryButton;
    this.searchEditText = searchEditText;
    this.searchInputLayout = searchInputLayout;
    this.statusChipGroup = statusChipGroup;
    this.swipeRefreshLayout = swipeRefreshLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLaunchesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLaunchesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_launches, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLaunchesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipFailed;
      Chip chipFailed = ViewBindings.findChildViewById(rootView, id);
      if (chipFailed == null) {
        break missingId;
      }

      id = R.id.chipPending;
      Chip chipPending = ViewBindings.findChildViewById(rootView, id);
      if (chipPending == null) {
        break missingId;
      }

      id = R.id.chipSuccess;
      Chip chipSuccess = ViewBindings.findChildViewById(rootView, id);
      if (chipSuccess == null) {
        break missingId;
      }

      id = R.id.errorContainer;
      Group errorContainer = ViewBindings.findChildViewById(rootView, id);
      if (errorContainer == null) {
        break missingId;
      }

      id = R.id.errorIcon;
      ImageView errorIcon = ViewBindings.findChildViewById(rootView, id);
      if (errorIcon == null) {
        break missingId;
      }

      id = R.id.errorMessage;
      TextView errorMessage = ViewBindings.findChildViewById(rootView, id);
      if (errorMessage == null) {
        break missingId;
      }

      id = R.id.errorText;
      TextView errorText = ViewBindings.findChildViewById(rootView, id);
      if (errorText == null) {
        break missingId;
      }

      id = R.id.errorTitle;
      TextView errorTitle = ViewBindings.findChildViewById(rootView, id);
      if (errorTitle == null) {
        break missingId;
      }

      id = R.id.launchesRecyclerView;
      RecyclerView launchesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (launchesRecyclerView == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.retryButton;
      Button retryButton = ViewBindings.findChildViewById(rootView, id);
      if (retryButton == null) {
        break missingId;
      }

      id = R.id.searchEditText;
      TextInputEditText searchEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchEditText == null) {
        break missingId;
      }

      id = R.id.searchInputLayout;
      TextInputLayout searchInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchInputLayout == null) {
        break missingId;
      }

      id = R.id.statusChipGroup;
      ChipGroup statusChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (statusChipGroup == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      return new FragmentLaunchesBinding((ConstraintLayout) rootView, chipAll, chipFailed,
          chipPending, chipSuccess, errorContainer, errorIcon, errorMessage, errorText, errorTitle,
          launchesRecyclerView, progressBar, retryButton, searchEditText, searchInputLayout,
          statusChipGroup, swipeRefreshLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
